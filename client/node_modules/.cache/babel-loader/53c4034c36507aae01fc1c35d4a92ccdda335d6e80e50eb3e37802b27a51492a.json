{"ast":null,"code":"export const validateForm = inputs => {\n  const errors = [];\n\n  // Check if all required fields are filled in\n  const requiredFields = ['username', 'password', 'email', 'confirm_password', 'city', 'address', 'phone'];\n  const missingFields = requiredFields.filter(field => !inputs[field]);\n  if (missingFields.length > 0) {\n    errors.push(`Please fill in the following fields: ${missingFields.join(', ')}`);\n  }\n\n  // Check username\n  const usernameRegex = /^[a-zA-Z\\s]+$/;\n  if (!usernameRegex.test(inputs.username) || inputs.username.length > 55) {\n    errors.push('Invalid username');\n  }\n\n  // Check password\n  if (inputs.password.length < 3 || inputs.password.length > 8) {\n    errors.push('Password must be 3-8 characters long');\n  }\n  if (!/\\d/.test(inputs.password)) {\n    errors.push('Password must contain at least one number');\n  }\n  if (!/[a-zA-Z]/.test(inputs.password)) {\n    errors.push('Password must contain at least one letter');\n  }\n\n  // Check confirm_password\n  if (inputs.confirm_password !== inputs.password) {\n    errors.push('Passwords do not match');\n  }\n\n  // Check city\n  const cityRegex = /^[A-Za-z\\s]+$/;\n  if (!cityRegex.test(inputs.city) || inputs.city.length > 50) {\n    errors.push('Invalid city');\n  }\n\n  // Check address\n  if (inputs.address.length > 50) {\n    errors.push('Address cannot exceed 50 characters');\n  }\n\n  // Check phone\n  const phoneRegex = /^\\d{9,10}$/;\n  if (!phoneRegex.test(inputs.phone)) {\n    errors.push('Invalid phone number');\n  }\n  return errors;\n};","map":{"version":3,"names":["validateForm","inputs","errors","requiredFields","missingFields","filter","field","length","push","join","usernameRegex","test","username","password","confirm_password","cityRegex","city","address","phoneRegex","phone"],"sources":["C:/NodeReact - Final Project/030623/NodeReact/client/src/components/LoginRegisterForm/ValidateForm.js"],"sourcesContent":["export const validateForm = (inputs) => {\r\n  const errors = [];\r\n\r\n  // Check if all required fields are filled in\r\n  const requiredFields = [\r\n    'username',\r\n    'password',\r\n    'email',\r\n    'confirm_password',\r\n    'city',\r\n    'address',\r\n    'phone',\r\n  ];\r\n  const missingFields = requiredFields.filter((field) => !inputs[field]);\r\n  if (missingFields.length > 0) {\r\n    errors.push(\r\n      `Please fill in the following fields: ${missingFields.join(', ')}`\r\n    );\r\n  }\r\n\r\n  // Check username\r\n  const usernameRegex = /^[a-zA-Z\\s]+$/;\r\n  if (!usernameRegex.test(inputs.username) || inputs.username.length > 55) {\r\n    errors.push('Invalid username');\r\n  }\r\n\r\n  // Check password\r\n  if (inputs.password.length < 3 || inputs.password.length > 8) {\r\n    errors.push('Password must be 3-8 characters long');\r\n  }\r\n\r\n  if (!/\\d/.test(inputs.password)) {\r\n    errors.push('Password must contain at least one number');\r\n  }\r\n\r\n  if (!/[a-zA-Z]/.test(inputs.password)) {\r\n    errors.push('Password must contain at least one letter');\r\n  }\r\n\r\n  // Check confirm_password\r\n  if (inputs.confirm_password !== inputs.password) {\r\n    errors.push('Passwords do not match');\r\n  }\r\n\r\n  // Check city\r\n  const cityRegex = /^[A-Za-z\\s]+$/;\r\n  if (!cityRegex.test(inputs.city) || inputs.city.length > 50) {\r\n    errors.push('Invalid city');\r\n  }\r\n\r\n  // Check address\r\n  if (inputs.address.length > 50) {\r\n    errors.push('Address cannot exceed 50 characters');\r\n  }\r\n\r\n  // Check phone\r\n  const phoneRegex = /^\\d{9,10}$/;\r\n  if (!phoneRegex.test(inputs.phone)) {\r\n    errors.push('Invalid phone number');\r\n  }\r\n\r\n  return errors;\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAIC,MAAM,IAAK;EACtC,MAAMC,MAAM,GAAG,EAAE;;EAEjB;EACA,MAAMC,cAAc,GAAG,CACrB,UAAU,EACV,UAAU,EACV,OAAO,EACP,kBAAkB,EAClB,MAAM,EACN,SAAS,EACT,OAAO,CACR;EACD,MAAMC,aAAa,GAAGD,cAAc,CAACE,MAAM,CAAEC,KAAK,IAAK,CAACL,MAAM,CAACK,KAAK,CAAC,CAAC;EACtE,IAAIF,aAAa,CAACG,MAAM,GAAG,CAAC,EAAE;IAC5BL,MAAM,CAACM,IAAI,CACR,wCAAuCJ,aAAa,CAACK,IAAI,CAAC,IAAI,CAAE,EACnE,CAAC;EACH;;EAEA;EACA,MAAMC,aAAa,GAAG,eAAe;EACrC,IAAI,CAACA,aAAa,CAACC,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,IAAIX,MAAM,CAACW,QAAQ,CAACL,MAAM,GAAG,EAAE,EAAE;IACvEL,MAAM,CAACM,IAAI,CAAC,kBAAkB,CAAC;EACjC;;EAEA;EACA,IAAIP,MAAM,CAACY,QAAQ,CAACN,MAAM,GAAG,CAAC,IAAIN,MAAM,CAACY,QAAQ,CAACN,MAAM,GAAG,CAAC,EAAE;IAC5DL,MAAM,CAACM,IAAI,CAAC,sCAAsC,CAAC;EACrD;EAEA,IAAI,CAAC,IAAI,CAACG,IAAI,CAACV,MAAM,CAACY,QAAQ,CAAC,EAAE;IAC/BX,MAAM,CAACM,IAAI,CAAC,2CAA2C,CAAC;EAC1D;EAEA,IAAI,CAAC,UAAU,CAACG,IAAI,CAACV,MAAM,CAACY,QAAQ,CAAC,EAAE;IACrCX,MAAM,CAACM,IAAI,CAAC,2CAA2C,CAAC;EAC1D;;EAEA;EACA,IAAIP,MAAM,CAACa,gBAAgB,KAAKb,MAAM,CAACY,QAAQ,EAAE;IAC/CX,MAAM,CAACM,IAAI,CAAC,wBAAwB,CAAC;EACvC;;EAEA;EACA,MAAMO,SAAS,GAAG,eAAe;EACjC,IAAI,CAACA,SAAS,CAACJ,IAAI,CAACV,MAAM,CAACe,IAAI,CAAC,IAAIf,MAAM,CAACe,IAAI,CAACT,MAAM,GAAG,EAAE,EAAE;IAC3DL,MAAM,CAACM,IAAI,CAAC,cAAc,CAAC;EAC7B;;EAEA;EACA,IAAIP,MAAM,CAACgB,OAAO,CAACV,MAAM,GAAG,EAAE,EAAE;IAC9BL,MAAM,CAACM,IAAI,CAAC,qCAAqC,CAAC;EACpD;;EAEA;EACA,MAAMU,UAAU,GAAG,YAAY;EAC/B,IAAI,CAACA,UAAU,CAACP,IAAI,CAACV,MAAM,CAACkB,KAAK,CAAC,EAAE;IAClCjB,MAAM,CAACM,IAAI,CAAC,sBAAsB,CAAC;EACrC;EAEA,OAAON,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}