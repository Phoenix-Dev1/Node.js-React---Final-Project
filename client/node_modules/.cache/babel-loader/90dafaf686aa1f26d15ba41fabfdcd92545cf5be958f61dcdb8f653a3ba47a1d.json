{"ast":null,"code":"export const validateForm = (inputs, setError) => {\n  // Check if all required fields are filled in\n  const requiredFields = ['username', 'email', 'password', 'confirm_password', 'city', 'address', 'phone'];\n  const missingFields = requiredFields.filter(field => !inputs[field]);\n  if (missingFields.length > 0) {\n    setError(`Please fill in the following fields: ${missingFields.join(', ')}`);\n    return false;\n  }\n\n  // Check first_name and last_name\n  const nameRegex = /^[a-zA-Z\\s]+$/; // Allow alphabets and spaces\n  if (!nameRegex.test(inputs.username) || inputs.username.length > 55) {\n    setError('Invalid User name');\n    return false;\n  }\n  if (!nameRegex.test(inputs.username) || inputs.username.length < 2) {\n    setError('Invalid User name');\n    return false;\n  }\n\n  // Check password\n  if (inputs.password.length < 3 || inputs.password.length > 8) {\n    setError('Password must be at least 3-8 characters long');\n    return false;\n  }\n  if (!/\\d/.test(inputs.password)) {\n    setError('Password must contain at least one number');\n    return false;\n  }\n  if (!/[a-zA-Z]/.test(inputs.password)) {\n    setError('Password must contain at least one letter');\n    return false;\n  }\n\n  // Check confirm_password\n  if (inputs.confirm_password !== inputs.password) {\n    setError('Passwords do not match');\n    return false;\n  }\n  const addressRegex = /^[A-Za-z0-9\\s.-]+$/;\n  // Check city and address\n  if (!addressRegex.test(inputs.city) || inputs.city.length > 50) {\n    setError('Invalid city');\n    return false;\n  }\n\n  // Check address\n  if (inputs.address.length > 50) {\n    setError('Address cannot exceed 50 characters');\n    return false;\n  }\n\n  // Check phone\n  const phoneRegex = /^\\d{9,10}$/;\n  if (!phoneRegex.test(inputs.phone)) {\n    setError('Invalid phone number');\n    return false;\n  }\n  return true;\n};","map":{"version":3,"names":["validateForm","inputs","setError","requiredFields","missingFields","filter","field","length","join","nameRegex","test","username","password","confirm_password","addressRegex","city","address","phoneRegex","phone"],"sources":["C:/NodeReact - Final Project/030623/NodeReact/client/src/pages/register/ValidateForm.js"],"sourcesContent":["export const validateForm = (inputs, setError) => {\r\n  // Check if all required fields are filled in\r\n  const requiredFields = [\r\n    'username',\r\n    'email',\r\n    'password',\r\n    'confirm_password',\r\n    'city',\r\n    'address',\r\n    'phone',\r\n  ];\r\n  const missingFields = requiredFields.filter((field) => !inputs[field]);\r\n\r\n  if (missingFields.length > 0) {\r\n    setError(\r\n      `Please fill in the following fields: ${missingFields.join(', ')}`\r\n    );\r\n    return false;\r\n  }\r\n\r\n  // Check first_name and last_name\r\n  const nameRegex = /^[a-zA-Z\\s]+$/; // Allow alphabets and spaces\r\n  if (!nameRegex.test(inputs.username) || inputs.username.length > 55) {\r\n    setError('Invalid User name');\r\n    return false;\r\n  }\r\n  if (!nameRegex.test(inputs.username) || inputs.username.length < 2) {\r\n    setError('Invalid User name');\r\n    return false;\r\n  }\r\n\r\n  // Check password\r\n  if (inputs.password.length < 3 || inputs.password.length > 8) {\r\n    setError('Password must be at least 3-8 characters long');\r\n    return false;\r\n  }\r\n\r\n  if (!/\\d/.test(inputs.password)) {\r\n    setError('Password must contain at least one number');\r\n    return false;\r\n  }\r\n\r\n  if (!/[a-zA-Z]/.test(inputs.password)) {\r\n    setError('Password must contain at least one letter');\r\n    return false;\r\n  }\r\n\r\n  // Check confirm_password\r\n  if (inputs.confirm_password !== inputs.password) {\r\n    setError('Passwords do not match');\r\n    return false;\r\n  }\r\n\r\n  const addressRegex = /^[A-Za-z0-9\\s.-]+$/;\r\n  // Check city and address\r\n  if (!addressRegex.test(inputs.city) || inputs.city.length > 50) {\r\n    setError('Invalid city');\r\n    return false;\r\n  }\r\n\r\n  // Check address\r\n  if (inputs.address.length > 50) {\r\n    setError('Address cannot exceed 50 characters');\r\n    return false;\r\n  }\r\n\r\n  // Check phone\r\n  const phoneRegex = /^\\d{9,10}$/;\r\n  if (!phoneRegex.test(inputs.phone)) {\r\n    setError('Invalid phone number');\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAGA,CAACC,MAAM,EAAEC,QAAQ,KAAK;EAChD;EACA,MAAMC,cAAc,GAAG,CACrB,UAAU,EACV,OAAO,EACP,UAAU,EACV,kBAAkB,EAClB,MAAM,EACN,SAAS,EACT,OAAO,CACR;EACD,MAAMC,aAAa,GAAGD,cAAc,CAACE,MAAM,CAAEC,KAAK,IAAK,CAACL,MAAM,CAACK,KAAK,CAAC,CAAC;EAEtE,IAAIF,aAAa,CAACG,MAAM,GAAG,CAAC,EAAE;IAC5BL,QAAQ,CACL,wCAAuCE,aAAa,CAACI,IAAI,CAAC,IAAI,CAAE,EACnE,CAAC;IACD,OAAO,KAAK;EACd;;EAEA;EACA,MAAMC,SAAS,GAAG,eAAe,CAAC,CAAC;EACnC,IAAI,CAACA,SAAS,CAACC,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,IAAIV,MAAM,CAACU,QAAQ,CAACJ,MAAM,GAAG,EAAE,EAAE;IACnEL,QAAQ,CAAC,mBAAmB,CAAC;IAC7B,OAAO,KAAK;EACd;EACA,IAAI,CAACO,SAAS,CAACC,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,IAAIV,MAAM,CAACU,QAAQ,CAACJ,MAAM,GAAG,CAAC,EAAE;IAClEL,QAAQ,CAAC,mBAAmB,CAAC;IAC7B,OAAO,KAAK;EACd;;EAEA;EACA,IAAID,MAAM,CAACW,QAAQ,CAACL,MAAM,GAAG,CAAC,IAAIN,MAAM,CAACW,QAAQ,CAACL,MAAM,GAAG,CAAC,EAAE;IAC5DL,QAAQ,CAAC,+CAA+C,CAAC;IACzD,OAAO,KAAK;EACd;EAEA,IAAI,CAAC,IAAI,CAACQ,IAAI,CAACT,MAAM,CAACW,QAAQ,CAAC,EAAE;IAC/BV,QAAQ,CAAC,2CAA2C,CAAC;IACrD,OAAO,KAAK;EACd;EAEA,IAAI,CAAC,UAAU,CAACQ,IAAI,CAACT,MAAM,CAACW,QAAQ,CAAC,EAAE;IACrCV,QAAQ,CAAC,2CAA2C,CAAC;IACrD,OAAO,KAAK;EACd;;EAEA;EACA,IAAID,MAAM,CAACY,gBAAgB,KAAKZ,MAAM,CAACW,QAAQ,EAAE;IAC/CV,QAAQ,CAAC,wBAAwB,CAAC;IAClC,OAAO,KAAK;EACd;EAEA,MAAMY,YAAY,GAAG,oBAAoB;EACzC;EACA,IAAI,CAACA,YAAY,CAACJ,IAAI,CAACT,MAAM,CAACc,IAAI,CAAC,IAAId,MAAM,CAACc,IAAI,CAACR,MAAM,GAAG,EAAE,EAAE;IAC9DL,QAAQ,CAAC,cAAc,CAAC;IACxB,OAAO,KAAK;EACd;;EAEA;EACA,IAAID,MAAM,CAACe,OAAO,CAACT,MAAM,GAAG,EAAE,EAAE;IAC9BL,QAAQ,CAAC,qCAAqC,CAAC;IAC/C,OAAO,KAAK;EACd;;EAEA;EACA,MAAMe,UAAU,GAAG,YAAY;EAC/B,IAAI,CAACA,UAAU,CAACP,IAAI,CAACT,MAAM,CAACiB,KAAK,CAAC,EAAE;IAClChB,QAAQ,CAAC,sBAAsB,CAAC;IAChC,OAAO,KAAK;EACd;EAEA,OAAO,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}